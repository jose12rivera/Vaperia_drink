@page "/"
@using Vaperia_drink.Data
@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Inicio de Sesión</PageTitle>

<div class="login-container">
    <div class="login-box">
        <img src="/logo-vaperia.png" alt="Logo Vapería" class="login-icon" />
        <h2>Vapería</h2>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger">@errorMessage</div>
        }

        <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
            <DataAnnotationsValidator />

            <div class="form-group">
                <label class="form-label">Email</label>
                <InputText @bind-Value="Input.Email"
                           class="form-control"
                           autocomplete="username"
                           placeholder="Correo electronico" />
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>

            <div class="form-group">
                <label class="form-label">Contraseña</label>
                <InputText type="password"
                           @bind-Value="Input.Password"
                           class="form-control"
                           autocomplete="current-password"
                           placeholder="Constrasena" />
                <ValidationMessage For="() => Input.Password" class="text-danger" />
            </div>

            <button type="submit" class="btn-submit">Iniciar sesión</button>

            <div class="links">
                <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">
                    ¿No tienes una cuenta? Regístrate
                </a>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("Usuario logueado.");
            RedirectManager.RedirectTo("/Menu");
        }
        else
        {
            errorMessage = "Error: Intento de inicio de sesión inválido.";
        }
    }

    private sealed class InputModel
    {
        [Required(ErrorMessage = "El email es requerido")]
        [EmailAddress(ErrorMessage = "Email inválido")]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = "La contraseña es requerida")]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        public bool RememberMe { get; set; }
    }
}