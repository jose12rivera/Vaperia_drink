@page "/"
@using Microsoft.AspNetCore.Identity
@using Vaperia_drink.Data
@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager NavigationManager

<PageTitle>Bienvenido - Vapería</PageTitle>

<div class="welcome-container">
    @if (!mostrarRegistro)
    {
        <!-- LOGIN -->
        <div class="auth-box">
            <img src="/logo-vaperia.png" alt="Logo Vapería" class="auth-icon" />
            <h2>Vapería SAHARA</h2>
            <p class="subtitle">Inicia sesión para continuar</p>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger">@errorMessage</div>
            }

            <EditForm Model="LoginInput" OnValidSubmit="LoginUser" FormName="login">
                <DataAnnotationsValidator />

                <div class="form-floating mb-3">
                    <InputText @bind-Value="LoginInput.Email"
                               class="form-control"
                               placeholder="correo@ejemplo.com" />
                    <label>Correo Electrónico</label>
                    <ValidationMessage For="() => LoginInput.Email" class="text-danger" />
                </div>

                <div class="form-floating mb-3">
                    <InputText type="password"
                               @bind-Value="LoginInput.Password"
                               class="form-control"
                               placeholder="Contraseña" />
                    <label>Contraseña</label>
                    <ValidationMessage For="() => LoginInput.Password" class="text-danger" />
                </div>

                <div class="checkbox-container mb-3">
                    <label>
                        <InputCheckbox @bind-Value="LoginInput.RememberMe" class="form-check-input" />
                        Recordarme
                    </label>
                </div>

                <button type="submit" class="btn-submit">Iniciar Sesión</button>

                <div class="links">
                    <p>
                        <button type="button" @onclick="() => mostrarRegistro = true" class="link-button">
                            ¿No tienes cuenta? Regístrate
                        </button>
                    </p>
                </div>
            </EditForm>
        </div>
    }
    else
    {
        <!-- REGISTRO -->
        <div class="auth-box">
            <img src="/logo-vaperia.png" alt="Logo Vapería" class="auth-icon" />
            <h2>Crear cuenta</h2>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger">@errorMessage</div>
            }

            <EditForm Model="RegisterInput" OnValidSubmit="RegisterUser" FormName="register">
                <DataAnnotationsValidator />

                <div class="form-floating mb-3">
                    <InputText @bind-Value="RegisterInput.NombreCompleto"
                               class="form-control"
                               placeholder="Juan Pérez" />
                    <label>Nombre completo</label>
                    <ValidationMessage For="() => RegisterInput.NombreCompleto" />
                </div>

                <div class="form-floating mb-3">
                    <InputText @bind-Value="RegisterInput.Email"
                               class="form-control"
                               placeholder="correo@ejemplo.com" />
                    <label>Correo Electrónico</label>
                    <ValidationMessage For="() => RegisterInput.Email" />
                </div>

                <div class="form-floating mb-3">
                    <InputText type="password"
                               @bind-Value="RegisterInput.Password"
                               class="form-control"
                               placeholder="Contraseña" />
                    <label>Contraseña (mínimo 6 caracteres)</label>
                    <ValidationMessage For="() => RegisterInput.Password" />
                </div>

                <div class="form-floating mb-3">
                    <InputText type="password"
                               @bind-Value="RegisterInput.ConfirmPassword"
                               class="form-control"
                               placeholder="Confirmar" />
                    <label>Confirmar contraseña</label>
                    <ValidationMessage For="() => RegisterInput.ConfirmPassword" />
                </div>

                <div class="form-floating mb-3">
                    <InputSelect @bind-Value="RegisterInput.Rol" class="form-control">
                        <option value="vendedor">Vendedor</option>
                        <option value="admin">Administrador</option>
                    </InputSelect>
                    <label>Rol</label>
                </div>

                <div class="mb-3">
                    <label>Subir foto (Opcional)</label>
                    <InputFile OnChange="OnFileSelected" class="form-control" />
                </div>

                <button type="submit" class="btn-submit">Crear cuenta</button>

                <div class="links">
                    <p>
                        <button type="button" @onclick="() => mostrarRegistro = false" class="link-button">
                            ¿Ya tienes cuenta? Inicia sesión
                        </button>
                    </p>
                </div>
            </EditForm>
        </div>
    }
</div>

@code {
    private bool mostrarRegistro = false;
    private string? errorMessage;
    private byte[]? fotoBytes;

    [SupplyParameterFromForm]
    private LoginModel LoginInput { get; set; } = new();

    [SupplyParameterFromForm]
    private RegisterModel RegisterInput { get; set; } = new();

    private async Task LoginUser()
    {
        errorMessage = null;

        var result = await SignInManager.PasswordSignInAsync(
            LoginInput.Email, LoginInput.Password, LoginInput.RememberMe, lockoutOnFailure: false);

        if (result.Succeeded)
        {
            NavigationManager.NavigateTo("/Menu");
        }
        else
        {
            errorMessage = "Correo o contraseña incorrectos";
        }
    }

    private async Task RegisterUser()
    {
        errorMessage = null;

        var user = new ApplicationUser
            {
                UserName = RegisterInput.Email,
                Email = RegisterInput.Email
            };

        var result = await UserManager.CreateAsync(user, RegisterInput.Password);

        if (result.Succeeded)
        {
            await SignInManager.SignInAsync(user, isPersistent: false);
            NavigationManager.NavigateTo("/Menu");
        }
        else
        {
            errorMessage = string.Join(", ", result.Errors.Select(e => e.Description));
        }
    }

    private async Task OnFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            using var ms = new MemoryStream();
            await file.OpenReadStream().CopyToAsync(ms);
            fotoBytes = ms.ToArray();
        }
    }

    private sealed class LoginModel
    {
        [Required(ErrorMessage = "El correo es obligatorio")]
        [EmailAddress(ErrorMessage = "Correo inválido")]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = "La contraseña es obligatoria")]
        public string Password { get; set; } = "";

        public bool RememberMe { get; set; }
    }

    private sealed class RegisterModel
    {
        [Required(ErrorMessage = "El nombre es obligatorio")]
        public string NombreCompleto { get; set; } = "";

        [Required(ErrorMessage = "El correo es obligatorio")]
        [EmailAddress(ErrorMessage = "Correo inválido")]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = "La contraseña es obligatoria")]
        [StringLength(100, MinimumLength = 6, ErrorMessage = "Mínimo 6 caracteres")]
        public string Password { get; set; } = "";

        [Compare(nameof(Password), ErrorMessage = "Las contraseñas no coinciden")]
        public string ConfirmPassword { get; set; } = "";

        public string Rol { get; set; } = "vendedor";
    }
}