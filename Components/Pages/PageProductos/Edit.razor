@page "/Productos/Edit/{ProductoId:int}"
@inject ProductoService productoService
@inject NavigationManager navigationManager
@inject ToastService toastService
@rendermode InteractiveServer

<PageTitle>Modificar Producto</PageTitle>

<EditForm Model="producto" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <Toasts class="p-3" Messages="Mensaje" AutoHide="true" StackLength="3" Placement="ToastsPlacement.TopRight" />

    <div class="container-fluid vh-100 d-flex flex-column justify-content-center p-3">
        <div class="card shadow-lg border-0 rounded-lg">
            <div class="card-header d-flex justify-content-between align-items-center" style="background-color: #008DD9; color: #fff;">
                <h3 class="m-0">Modificar Producto</h3>
            </div>

            <div class="card-body bg-light">
                <section class="mb-4">
                    <h5 class="text-secondary border-bottom pb-2">Información del Producto</h5>

                    <div class="row">
                        <!-- Nombre -->
                        <div class="col-md-6 mb-3">
                            <label for="nombre" class="form-label"><strong>Nombre del Producto:</strong></label>
                            <InputText id="nombre" class="form-control shadow-sm" @bind-Value="producto.Nombre" />
                            <ValidationMessage For="@(() => producto.Nombre)" />
                        </div>

                        <!-- Categoría -->
                        <div class="col-md-6 mb-3">
                            <label for="categoria" class="form-label"><strong>Categoría:</strong></label>
                            <InputText id="categoria" class="form-control shadow-sm" @bind-Value="producto.Categoria" />
                            <ValidationMessage For="@(() => producto.Categoria)" />
                        </div>
                    </div>

                    <div class="row">
                        <!-- Precio -->
                        <div class="col-md-6 mb-3">
                            <label for="precio" class="form-label"><strong>Precio:</strong></label>
                            <InputNumber id="precio" class="form-control shadow-sm" @bind-Value="producto.Precio" />
                            <ValidationMessage For="@(() => producto.Precio)" />
                        </div>

                        <!-- Stock -->
                        <div class="col-md-6 mb-3">
                            <label for="stock" class="form-label"><strong>Stock:</strong></label>
                            <InputNumber id="stock" class="form-control shadow-sm" @bind-Value="producto.Stock" />
                            <ValidationMessage For="@(() => producto.Stock)" />
                        </div>
                    </div>

                    <!-- URL de Foto -->
                    <div class="row">
                        <div class="col-md-12 mb-3">
                            <label for="fotoUrl" class="form-label"><strong>URL de la Foto (Opcional):</strong></label>
                            <InputText id="fotoUrl" class="form-control shadow-sm" @bind-Value="producto.FotoUrl" />
                            @if (!string.IsNullOrEmpty(producto.FotoUrl))
                            {
                                <div class="mt-2">
                                    <small class="text-muted">Vista previa:</small>
                                    <img src="@producto.FotoUrl" alt="Vista previa" style="max-width: 100px; max-height: 100px;" class="mt-1 rounded border" />
                                </div>
                            }
                        </div>
                    </div>
                </section>
            </div>

            <div class="card-footer bg-light text-center">
                <button type="button" class="btn btn-outline-primary me-2" @onclick="Resetear">
                    <i class="bi bi-arrow-clockwise me-2"></i> Resetear
                </button>
                <button type="submit" class="btn btn-outline-success me-2">
                    <i class="bi bi-save me-2"></i> Actualizar
                </button>
                <button type="button" class="btn btn-outline-danger" @onclick="Volver">
                    <i class="bi bi-arrow-left-circle-fill me-2"></i> Volver
                </button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public int ProductoId { get; set; }

    private Productos producto = new Productos();
    private Productos productoOriginal = new Productos();
    private EditContext editContext;
    List<ToastMessage> Mensaje = new List<ToastMessage>();

    protected override async Task OnInitializedAsync()
    {
        var productoEncontrado = await productoService.Buscar(ProductoId);
        if (productoEncontrado != null)
        {
            producto = productoEncontrado;
            // Guardar copia para resetear
            productoOriginal = new Productos
                {
                    Nombre = producto.Nombre,
                    Categoria = producto.Categoria,
                    Precio = producto.Precio,
                    Stock = producto.Stock,
                    FotoUrl = producto.FotoUrl
                };
        }
        editContext = new EditContext(producto);
    }

    private async Task Guardar()
    {
        if (editContext.Validate())
        {
            var guardado = await productoService.Guardar(producto);
            if (guardado)
            {
                toastService.Notify(new ToastMessage(
                    ToastType.Success,
                    iconName: IconName.None,
                    title: "Actualización Exitosa",
                    helpText: "El producto se ha actualizado exitosamente.",
                    message: "El producto ha sido modificado correctamente."
                ));
                await Task.Delay(2000);
                Volver();
            }
            else
            {
                toastService.Notify(new ToastMessage(
                    ToastType.Danger,
                    iconName: IconName.None,
                    title: "Error",
                    helpText: "No se pudo actualizar el producto.",
                    message: "Hubo un error al actualizar el producto."
                ));
            }
        }
    }

    private void Resetear()
    {
        producto.Nombre = productoOriginal.Nombre;
        producto.Categoria = productoOriginal.Categoria;
        producto.Precio = productoOriginal.Precio;
        producto.Stock = productoOriginal.Stock;
        producto.FotoUrl = productoOriginal.FotoUrl;

        toastService.Notify(new ToastMessage(
            ToastType.Info,
            iconName: IconName.None,
            title: "Formulario Reseteado",
            helpText: "",
            message: "Los cambios han sido revertidos a los valores originales."
        ));
    }

    private async Task Volver()
    {
        toastService.Notify(new ToastMessage(
            ToastType.Info,
            iconName: IconName.None,
            title: "Volver",
            helpText: "Regresando a la lista de productos.",
            message: "Redirigiendo..."
        ));
        await Task.Delay(1500);
        navigationManager.NavigateTo("/Productos/Index");
    }
}